
#include <stdio.h>
#include <stdbool.h>
#include <unistd.h> // Para usleep()

// Definición de estados
typedef enum {
    ESPERA,
    ABRIENDO,
    ABIERTA,
    CERRANDO,
    CERRADA,
    CERRANDO_EMERGENCIA,
    REVERSA,
    PARADA,
    FALLA
} EstadoPuerta;

// Variables globales
EstadoPuerta estadoActual = ESPERA;
bool hayObstaculo = false;
bool fallaDetectada = false;
int tiempoProceso = 0;

// Prototipos de funciones
void manejarFalla();
void mostrarEstado();
void simularProceso(int segundos, EstadoPuerta siguienteEstado);
void manejarEventos(int opcion);

int main() {
    printf("Sistema de Portón Automático Iniciado\n");

    while (1) {
        int opcion;
        printf("\n1. Abrir\n2. Cerrar\n3. Paro\n4. Simular obstáculo\n5. Quitar obstáculo\n6. Simular falla\n7. Reparar falla\n8. Salir\n");
        printf("Seleccione opción: ");
        scanf("%d", &opcion);

        manejarEventos(opcion);
        mostrarEstado();

        // Simulación de tiempo entre iteraciones
        usleep(500000); // 0.5 segundos
    }
    return 0;
}

// Muestra el estado actual del sistema
void mostrarEstado() {
    const char *nombresEstados[] = {"ESPERA", "ABRIENDO", "ABIERTA", "CERRANDO", "CERRADA", "CERRANDO_EMERGENCIA", "REVERSA", "PARADA", "FALLA"};
    printf("Estado actual: %s\n", nombresEstados[estadoActual]);
}

// Simula un proceso con duración y transición de estado
void simularProceso(int segundos, EstadoPuerta siguienteEstado) {
    for (int i = 0; i < segundos; i++) {
        if (hayObstaculo && estadoActual == CERRANDO) {
            printf("Obstáculo detectado. Revirtiendo...\n");
            estadoActual = REVERSA;
            return;
        }
        printf("Procesando... (%d/%d segundos)\n", i + 1, segundos);
        usleep(1000000); // 1 segundo
    }
    estadoActual = siguienteEstado;
}

// Manejo de eventos según la entrada del usuario
void manejarEventos(int opcion) {
    switch (opcion) {
        case 1:
            if (estadoActual == ESPERA || estadoActual == CERRADA) {
                printf("Iniciando apertura...\n");
                estadoActual = ABRIENDO;
                simularProceso(5, ABIERTA);
            }
            break;

        case 2:
            if (estadoActual == ABIERTA) {
                printf("Iniciando cierre...\n");
                estadoActual = CERRANDO;
                simularProceso(5, CERRADA);
            }
            break;

        case 3:
            printf("Paro de emergencia activado!\n");
            estadoActual = PARADA;
            break;

        case 4:
            printf("Obstáculo detectado en el camino!\n");
            hayObstaculo = true;
            break;

        case 5:
            printf("Obstáculo eliminado.\n");
            hayObstaculo = false;
            if (estadoActual == REVERSA) {
                estadoActual = ABRIENDO;
                simularProceso(3, ABIERTA);
            }
            break;

        case 6:
            printf("Falla detectada en el sistema!\n");
            fallaDetectada = true;
            estadoActual = FALLA;
            break;

        case 7:
            if (fallaDetectada) {
                printf("Reparando falla...\n");
                fallaDetectada = false;
                estadoActual = ESPERA;
            }
            break;

        case 8:
            printf("Saliendo del sistema...\n");
            exit(0);

        default:
            printf("Opción inválida. Intente nuevamente.\n");
            break;
    }
}
